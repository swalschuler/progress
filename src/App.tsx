import React, { useState, useEffect } from "react";
import logo from "./logo.svg";
import "./App.css";
import ProgressBar from "./components/ProgressBar";

function App() {
  const [time, setTime] = useState(new Date());

  useEffect(() => {
    const interval = setInterval(() => setTime(new Date()), 10);
    return () => {
      clearInterval(interval);
    };
  }, []);

  // This function was generated by ChatGPT
  function getNumDaysInCurrentMonth(): number {
    const currentDate = new Date();
    const year = currentDate.getFullYear();
    const month = currentDate.getMonth() + 1;

    const lastDayOfMonth = new Date(year, month, 0);

    return lastDayOfMonth.getDate();
  }

  // This function was generated by ChatGPT
  function getNumDaysInCurrentYear(): number {
    const currentYear = new Date().getFullYear();
    if (
      currentYear % 4 === 0 &&
      (currentYear % 100 !== 0 || currentYear % 400 === 0)
    ) {
      return 366; // Leap year
    } else {
      return 365; // Regular year
    }
  }

  // This function was generated by ChatGPT
  function daysInYearToDate(): number {
    const now = new Date();
    const startOfYear = new Date(now.getFullYear(), 0, 1);
    const timeDifference = now.getTime() - startOfYear.getTime();
    const daysElapsed = Math.floor(timeDifference / (1000 * 60 * 60 * 24));

    return daysElapsed + 1; // Adding 1 because the current day is inclusive
  }

  return (
    <div className="container">
      <div className="app-title-container">
        <div className="app-title">Progress</div>
        <div className="app-sub-title">
          A recreation of <a href="https://neal.fun/progress/">neal.fun</a>
        </div>
      </div>
      <div className="progress-bars">
        <ProgressBar
          title={"ðŸ•‘ Next minute"}
          time={time}
          getPercentage={(time: Date) => (time.getSeconds() / 60) * 100}
          getTimeLeft={(time: Date) => 60 - time.getSeconds()}
          singularSuffix={"second"}
        />
        <ProgressBar
          title={"ðŸ•‘ Next hour"}
          time={time}
          getPercentage={(time: Date) => (time.getMinutes() / 60) * 100}
          getTimeLeft={(time: Date) => 60 - time.getMinutes()}
          singularSuffix={"minute"}
        />
        <ProgressBar
          title={"ðŸŒ… Next day"}
          time={time}
          getPercentage={(time: Date) => (time.getHours() / 24) * 100}
          getTimeLeft={(time: Date) => 24 - time.getHours()}
          singularSuffix={"hour"}
        />
        <ProgressBar
          title={"ðŸ“… Next month"}
          time={time}
          getPercentage={(time: Date) =>
            (time.getDate() / getNumDaysInCurrentMonth()) * 100
          }
          getTimeLeft={(time: Date) =>
            getNumDaysInCurrentMonth() - time.getDate()
          }
          singularSuffix={"day"}
        />
        <ProgressBar
          title={"ðŸŽ† Next year"}
          time={time}
          getPercentage={(time: Date) =>
            (daysInYearToDate() / getNumDaysInCurrentYear()) * 100
          }
          getTimeLeft={(time: Date) =>
            getNumDaysInCurrentYear() - daysInYearToDate()
          }
          singularSuffix={"day"}
        />
      </div>
    </div>
  );
}

export default App;
